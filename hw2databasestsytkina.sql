
-- task for my data (generated by gemini): "Generate a 'High-Risk Animatronic Report' that identifies animatronics with 3 or more 'System Malfunction' events. For this specific list of high-risk animatronics, display their name, their model series, their original location's name, the total number of system malfunctions they've had, and the total combined cost of all maintenance ever performed on them. Sort the report from the most malfunctions to the least."

-- query from gemini (i asked it to do it illogical and unoptimised) 

create database fnaf_db;

CREATE TABLE locations (
  location_id INT PRIMARY KEY,
  location_name VARCHAR(55),
  established_year INT
);

CREATE TABLE animatronics (
  animatronic_id INT PRIMARY KEY,
  animatronic_name VARCHAR(55),
  model_series VARCHAR(55),
  initial_location_id INT,
  FOREIGN KEY (initial_location_id) REFERENCES locations(location_id)
);

CREATE TABLE security_shifts (
  shift_id INT PRIMARY KEY,
  location_id INT,
  guard_name VARCHAR(55),
  shift_start DATETIME,
  shift_end DATETIME,
  outcome VARCHAR(55),
  FOREIGN KEY (location_id) REFERENCES locations(location_id)
);

CREATE TABLE maintenance_logs (
  log_id INT PRIMARY KEY,
  animatronic_id INT,
  technician_name VARCHAR(55),
  service_date DATE,
  service_type VARCHAR(55),
  cost DECIMAL(10, 2),
  FOREIGN KEY (animatronic_id) REFERENCES animatronics(animatronic_id)
);

CREATE TABLE animatronic_events (
  event_id INT PRIMARY KEY,
  security_shift_id INT,
  animatronic_id INT,
  event_time TIME,
  event_location VARCHAR(55),
  event_type VARCHAR(55),
  FOREIGN KEY (security_shift_id) REFERENCES security_shifts(shift_id),
  FOREIGN KEY (animatronic_id) REFERENCES animatronics(animatronic_id)
);

USE fnaf_db;
SET SESSION max_execution_time = 30000000;
SHOW TABLES;
drop index event_type_animatronic on animatronic_events;
drop index logs_animatronic on maintenance_logs;
drop index basic_location_id on animatronics;
  


-- query by ai 
 SELECT
  a.animatronic_name,
  a.model_series,
  l.location_name,
  (SELECT
     COUNT(*)
   FROM
     animatronic_events AS e
   WHERE
     e.animatronic_id = a.animatronic_id
     AND e.event_type = 'System Malfunction'
  ) AS malfunction_count,
  (SELECT
     SUM(m.cost)
   FROM
     maintenance_logs AS m
   WHERE
     m.animatronic_id = a.animatronic_id
  ) AS total_maintenance_cost
  
FROM
  animatronics AS a
JOIN
  locations AS l
  ON a.initial_location_id = l.location_id
  
WHERE
  (SELECT
     COUNT(*)
   FROM
     animatronic_events AS e
   WHERE
     e.animatronic_id = a.animatronic_id
     AND e.event_type = 'System Malfunction'
  ) >= 3
ORDER BY
  malfunction_count DESC;
  
  
  
  
  -- my code starts here 
  
  create index event_type_animatronic on animatronic_events(event_type, animatronic_id);
  create index logs_animatronic on maintenance_logs(animatronic_id);
  create index basic_location_id on animatronics(animatronic_id);
  
  -- i have put indexes so tables would operate more quick
  
  WITH Functions as (
  select animatronic_id, count(*) as func_count from animatronic_events where event_type = 'System Malfunction' 
  group by animatronic_id 
  having count(*) >= 3),
  totals as (
  SELECT
      animatronic_id,
      SUM(cost) AS total_maintenance_cost
    FROM
      maintenance_logs
    GROUP BY
      animatronic_id),
final as ( SELECT
  a.animatronic_name,
  a.model_series,
  l.location_name,
  mc.func_count,
   COALESCE(tts.total_maintenance_cost, 0) AS total_maintenance_cost
   from Functions as mc
   join animatronics as a 
   on mc.animatronic_id = a.animatronic_id
   join locations as l
   on a.initial_location_id = l.location_id
left join totals as tts 
on tts.animatronic_id = mc.animatronic_id
order by mc.func_count desc
)
select * from final;


  